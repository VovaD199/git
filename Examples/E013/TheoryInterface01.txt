Интерфейсы
Чтобы определить интерфейс, используется ключевое слово interface. Например:
interface Printable{
    void print();
}

Интерфейс может определять константы и методы, которые могут иметь, а могут и не иметь реализации.
Методы без реализации похожи на абстрактные методы абстрактных классов. (!)
Так, в данном случае объявлен один метод, который не имеет реализации.

Все методы интерфейса не имеют модификаторов доступа, но фактически по умолчанию доступ public,
так как цель интерфейса - определение функционала для реализации его классом.
Поэтому весь функционал должен быть открыт для реализации.

Чтобы класс применил интерфейс, надо использовать ключевое слово implements.

Если класс применяет интерфейс, то он должен реализовать все методы интерфейса (!)

В тоже время мы не можем напрямую создавать объекты интерфейсов, поэтому следующий код не будет работать:
Printable pr = new Printable();
pr.print();     // не будет работать


===Методы по умолчанию===
Ранее до JDK 8 при реализации интерфейса мы должны были обязательно реализовать все его методы в классе. (E007)
А сам интерфейс мог содержать ТОЛЬКО определения методов без конкретной реализации(!)
В JDK 8 была добавлена такая функциональность как методы по умолчанию.
И теперь интерфейсы кроме определения методов МОГУТ иметь их реализацию по умолчанию,
которая используется, если класс, реализующий данный интерфейс, не реализует метод.
Например, создадим метод по умолчанию в интерфейсе Printable:

interface Printable {
    default void print(){
        System.out.println("Undefined printable");   //реализация по умолчанию
    }
}
Метод по умолчанию - это обычный метод без модификаторов,
который помечается ключевым словом default.
Затем в классе Journal нам необязательно этот метод реализовать, хотя мы можем его и переопределить:

class Journal implements Printable {
     private String name;

    String getName(){
        return name;
    }
    Journal(String name){
        this.name = name;
    }
}
///////////
===Статические методы===

Начиная с JDK 8 в интерфейсах доступны статические методы - они аналогичны методам класса:

interface Printable {
    void print();
    static void read(){
        System.out.println("Read printable");
    }
}
Чтобы обратиться к статическому методу интерфейса также, как и в случае с классами,
пишут название интерфейса и метод:

public static void main(String[] args) {
    Printable.read();
}
////////////////
===Приватные методы===
По умолчанию все методы в интерфейсе фактически имеют модификатор public.
Однако начиная с Java 9 мы также можем определять в интерфейсе методы с модификатором private.
Они могут быть статическими и нестатическими, но они не могут иметь реализации по умолчанию.
interface Calculatable{
    default int sum(int a, int b){
        return sumAll(a, b);    // в отличии от стоки 34
    }

//////////
===Константы в интерфейсах===
Кроме методов в интерфейсах могут быть определены статические константы:

interface Stateable{
    int OPEN = 1;
    int CLOSED = 0;
    void printState(int n);
}
Хотя такие константы также не имеют модификаторов, но по умолчанию они имеют
модификатор доступа public static final, и поэтому их значение доступно из любого места программы.
//////

===Множественная реализация интерфейсов===
Если нам надо применить в классе несколько интерфейсов, то они все перечисляются через запятую после слова implements:

interface Printable {
    // методы интерфейса
}
interface Searchable {
    // методы интерфейса
}

class Book implements Printable, Searchable{
    // реализация класса
}

//////////////
===Наследование интерфейсов===
Интерфейсы, как и классы, могут наследоваться:

interface BookPrintable extends Printable{
    void paint();
}
При применении этого интерфейса класс Book должен будет реализовать
как методы интерфейса BookPrintable, так и методы базового интерфейса Printable.
/////////////
===Вложенные интерфейсы===
Как и классы, интерфейсы могут быть вложенными, то есть могут быть определены в классах или других интерфейсах

При применении такого интерфейса нам надо указывать его полное имя вместе с именем класса:
public class Journal implements Printer.Printable { // не указывал полный пример, идея думаю понятна

Использование интерфейса будет аналогично предыдущим случаям:
Printer.Printable p =new Journal("Foreign Affairs");
p.print();
/////////////
===Интерфейсы как параметры и результаты методов===
И также как и в случае с классами, интерфейсы могут использоваться в качестве типа параметров метода
или в качестве возвращаемого типа:

public class Program2 {
    public static void main(String[] args) {
        Printable printable = createPrintable("Foreign Affairs", false);
        printable.print();

        read(new Book("Java for impatients", "Cay Horstmann"));
        read(new Journal("Java Dayly News"));
    }

    static void read(Printable p) {
        p.print();
    }

    static Printable createPrintable(String name, boolean option) {

        if (option)
            return new Book(name, "Undefined");
        else
            return new Journal(name);
    }
}

interface Printable {

    void print();
}

class Book implements Printable {

    String name;
    String author;

    Book(String name, String author) {

        this.name = name;
        this.author = author;
    }

    public void print() {

        System.out.printf("%s (%s) \n", name, author);
    }
}

class Journal implements Printable {

    private String name;

    String getName() {
        return name;
    }

    Journal(String name) {

        this.name = name;
    }

    public void print() {
        System.out.println(name);
    }
}
//package Examples.E013;
//public class Program2

Метод read() в качестве параметра принимает объект интерфейса Printable,
поэтому в этот метод мы можем передать как объект Book, так и объект Journal.

Метод createPrintable() возвращает объект Printable, поэтому также мы можем возвратить как объект Book, так и Journal.

Консольный вывод:

Foreign Affairs
Java for impatients (Cay Horstmann)
Java Dayly News




