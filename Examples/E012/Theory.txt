entrySet()
////
Map в Java представляют структуры, которые отображают ключи в значения . Map не может содержать повторяющиеся ключи,
и каждый может быть сопоставлен не более чем с одним значением.
Реализации Map<K,V> являются общими и K (ключ) и V (значение).

Интерфейс Map также включает методы для некоторых основных операций (таких как put() ,
get() , containsKey() , containsValue() , size() и т. Д.), putAll() и clear() )
и представления коллекций (такие как keySet() , entrySet() и values() ).

Наиболее известными Map используемыми для общих целей, являются: HashMap , TreeMap и LinkedHashMap .

////
Фильтрация карты с помощью расширенных циклов for
Давайте HashMap несколькими парами ключ-значение:

 Map<Integer, String> employeeMap = new HashMap<>();

 employeeMap.put(35, "Mark");
 employeeMap.put(40, "John");
 employeeMap.put(23, "Michael");
 employeeMap.put(31, "Jim");
 employeeMap.put(25, "Kevin");
Map имеет ключи типа Integer и значения типа String . Они представляют возраст и имя сотрудников.
///////////
Мы отфильтруем эту карту по ключам и значениям и сохраним результаты в Collection ,
например в другой Map или даже в другом HashMap .

Давайте перейдем к LinkedHashMap который сохраняет порядок вставки:

                *************>>>>
                 Map<Integer, String> linkedHashMap = new LinkedHashMap<>();

                 for (Map.Entry<Integer, String> employee : employeeMap.entrySet()) {
                 if(employee.getKey() > 30){
                 linkedHashMap.put(employee.getKey(), employee.getValue());
                 }
                 }

                 System.out.println("Filtered Map: " + linkedHashMap);
                Здесь мы прошли entrySet() в employeeMap и добавили каждого сотрудника в LinkedHashMap помощью его
                 метода put() Это будет работать точно так же для HashMap , но не сохранит порядок вставки:

                 Filtered Map: {35=Mark, 40=John, 31=Jim}
                 ************>>>>>>
Фильтрация по значениям сводится к тому же подходу, хотя мы будем проверять значение
каждой записи и использовать это в условии:

        Map<Integer, String> linkedHashMap = new LinkedHashMap<>();

        for (Map.Entry<Integer, String> employee : employeeMap.entrySet()) {
            if (employee.getValue().equals("Mark")) {
                linkedHashMap.put(employee.getKey(), employee.getValue());
            }
        }

        System.out.println("Filtered Map: " + linkedHashMap);

И это выведет:

 Filtered Map: {35=Mark}
Это ручной способ фильтрации карты - повторение и выбор желаемых элементов.
Давайте теперь посмотрим на более читаемый и удобный способ - через Stream API.


////////////
Stream.filter ()
Более современный способ фильтрации карт - это использование Stream API из Java 8,
что делает этот процесс более читаемым. Метод filter() Stream ,
как следует из названия, фильтрует любую Collection на основе заданного условия.

Например, учитывая Collection имен, вы можете отфильтровать их на основе таких условий,
как - содержащие определенные символы или начинающиеся с определенного символа.






