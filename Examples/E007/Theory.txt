=== Конструктор по умолчанию (запускать класс Cat)===
У каждого класса в Java есть так называемый конструктор по умолчанию.
У него нет никаких аргументов, но он срабатывает каждый раз при создании любого объекта любого класса.

public class Cat {

            //Конструктор по умолчанию на этой строке(ну, примерно), Вы его не видите, а он есть )))
   public static void main(String[] args) {

       Cat barsik = new Cat(); //вот здесь сработал конструктор по умолчанию
   }
}
-------------------------------------------
Чтобы это увидеть, напишем для класса Cat пустой конструктор,
а внутри него выведем какую-нибудь фразу в консоль. Если она выведется, значит конструктор отработал.

public class Cat {

   public Cat() {                             //пустой конструктор
       System.out.println("Создали кота!");   //а внутри него фраза, только для примера, размещать логику в конструкторе не стоит!
   }

   public static void main(String[] args) {

       Cat barsik = new Cat(); //вот здесь сработал конструктор по умолчанию
   }
}
-------------------------------------------
Конструктор по умолчанию всегда незримо присутствует в твоих классах. Но тебе нужно знать еще одну его особенность.
Дефолтный конструктор исчезает из класса, когда ты создаешь какой-то конструктор с аргументами.

!!!! Поэтому обязательно нужно запомнить: если в классе нужно несколько конструкторов, включая пустой, его нужно создать отдельно.
Пример двух конструкторос в классе "Cat".
После 16 строки можно вставить: "System.out.println("Создали кота!");"
Что бы посмотреть пример.
-------------------------------------------
Если выразить в одном предложении ответ на вопрос “Зачем нужен конструктор?”, можно сказать:
для того, чтобы объекты всегда находились в правильном состоянии. Когда ты используешь конструкторы,
все твои переменные будут корректно проинициализированы, и в программе не будет машин со скоростью 0
и прочих “неправильных” объектов.

Их использование очень выгодно прежде всего для самого программиста.

Если ты будешь инициализировать поля самостоятельно, велик риск что-нибудь пропустить и ошибиться.
А с конструктором такого не будет: если ты передал в него не все требуемые аргументы или перепутал их типы,
компилятор сразу же выдаст ошибку.

Отдельно стоит сказать о том, что внутрь конструктора не стоит помещать логику твоей программы(!!!).
Для этого в твоем распоряжении есть методы, в которых ты можешь описать весь нужный тебе функционал.
Премер нужно смотреть в классе "CarFactory". Раскомментировав 23 строку можно понять разницу.
В 23 строке деление на 0, которое в математике запрещено.

Вынести всю логику в отдельный метод и назвать его, например, printFactoryInfo().
В качестве параметра ему можно передать объект CarFactory. Туда же можно поместить всю логику,
и заодно — обработку возможных ошибок.
-------------------------------------------
Если коротко, то для обращения к сотоянию (аргументам) реализации (созданного представителя класса),
необходимо использовать ключевое слово "this" в конструкторе.
Но тогда в наш конструктор необходимо передать параметры.
Cat barsik = new Cat("Barsik", 5);
Или в самом конструкторе использовать значение аргументов по умолчанию.
-------------------------------------------
В классах E007BufferedReader, E007BufferedWriter, ReadingFromFile, WriteToFile примеры чтения и записи файл.

