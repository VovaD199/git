Модификаторы и параметры необязательны
По умолчанию главный класс любой программы на Java содержит метод main, который служит точкой входа в программу:

public static void main(String[] args) {
    System.out.println("привет мир!");
}
-----------------------------------------------
Ключевые слова public и static являются модификаторами. Далее идет тип возвращаемого значения.
Ключевое слово void указывает на то, что метод ничего не возвращает.

Затем идут название метода - main и в скобках параметры метода - String[] args.
И в фигурные скобки заключено тело метода - все действия, которые он выполняет.

Вызов метода осуществляется в форме:

имя_метода(аргументы);
-----------------------------------------------
Значения, которые передаются на место параметров, еще называются аргументами.
Значения передаются параметрам по позиции, то есть первый аргумент первому параметру,
второй аргумент - второму параметру и так далее.
-----------------------------------------------
===Параметры переменной длины===
Метод может принимать параметры переменной длины одного типа. Например, нам надо передать
в метод набор числел и вычислить их сумму, но мы точно не знаем, сколько именно
чисел будет передано - 3, 4, 5 или больше.

Троеточие перед названием параметра int ...nums указывает на то, что он будет необязательным
и будет представлять массив. Мы можем передать в метод sum одно число, несколько чисел,
а можем вообще не передавать никаких параметров. Причем, если мы хотим передать несколько
параметров, то необязательный параметр должен указываться в конце:
-----------------------------------------------
===Return===
Методы могут возвращать некоторое значение. Для этого применяется оператор return.

return возвращаемое_значение;

После оператора return указывается возвращаемое значение, которое является
результатом метода. Это может быть литеральное значение, значение переменной
или какого-то сложного выражения.
-----------------------------------------------
В методе в качестве типа возвращаемого значения вместо void используется любой другой тип.
В данном случае метод sum возвращает значение типа int, поэтому этот тип указывается перед
названием метода. Причем если в качестве возвращаемого типа для метода определен любой другой,
отличный от void, то метод обязательно должен использовать оператор return для возвращения значения.

При этом возвращаемое значение всегда должно иметь тот же тип, что значится в определении функции.
И если функция возвращает значение типа int, то после оператора return стоит целочисленное значение,
которое является объектом типа int. Как в данном случае это сумма значений параметров метода.

Метод может использовать несколько вызовов оператора return для возваращения разных значений в зависимости от условий.
-----------------------------------------------
===Выход из метода===

Оператор return применяется для возвращаения значения из метода, но и для выхода из метода.
В подобном качестве оператор return применяется в методах, которые ничего не возвращают,
то есть имеют тип void.

return;
-----------------------------------------------
===Перегрузка методов===

В программе мы можем использовать методы с одним и тем же именем, но с разными типами и/или
количеством параметров. Такой механизм называется перегрузкой методов (method overloading). !!!!!!

Стоит отметить, что на перегрузку методов влияют количество и типы параметров.
Однако различие в типе возвращаемого значения для перегрузки не имеют никакого значения.
-----------------------------------------------

-----------------------------------------------